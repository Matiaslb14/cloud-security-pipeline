name: Terraform Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
  workflow_dispatch: {}

concurrency:
  group: terraform
  cancel-in-progress: true

jobs:
  terraform:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    timeout-minutes: 25

    env:
      TF_IN_AUTOMATION: "true"
      TF_INPUT: "0"
      TF_VAR_my_ip_cidr: ${{ secrets.MY_IP_CIDR }}
      TF_VAR_key_pair_name: ${{ secrets.KEY_PAIR_NAME }}
      TF_VAR_alarm_email: ${{ secrets.ALARM_EMAIL }}
      TF_VAR_aws_region: us-east-1
      TF_VAR_instance_type: t2.micro

      # Backend (ajusta nombres si los cambiaste)
      TF_STATE_BUCKET: matiaslb14-tfstate-ue1
      TF_STATE_KEY: cloud-security/terraform.tfstate
      TF_LOCK_TABLE: matiaslb14-terraform-locks
      AWS_REGION: us-east-1

    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # ü©π No crear la tabla si no hay permisos; solo verificar que exista
      - name: Ensure S3 bucket and DynamoDB table exist
        run: |
          set -e

          echo "Verificando bucket S3: $TF_STATE_BUCKET ..."
          if aws s3api head-bucket --bucket "$TF_STATE_BUCKET" 2>/dev/null; then
            echo "Bucket $TF_STATE_BUCKET ya existe"
          else
            echo "Creando bucket $TF_STATE_BUCKET ..."
            # En us-east-1 NO se usa --create-bucket-configuration
            aws s3api create-bucket --bucket "$TF_STATE_BUCKET" --region "$AWS_REGION"
          fi

          echo "Habilitando versioning en $TF_STATE_BUCKET ..."
          aws s3api put-bucket-versioning \
            --bucket "$TF_STATE_BUCKET" \
            --versioning-configuration Status=Enabled

          echo "Habilitando encryption (AES256) en $TF_STATE_BUCKET ..."
          aws s3api put-bucket-encryption \
            --bucket "$TF_STATE_BUCKET" \
            --server-side-encryption-configuration '{
              "Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]
            }'

          echo "Verificando tabla DynamoDB: $TF_LOCK_TABLE ..."
          if aws dynamodb describe-table --table-name "$TF_LOCK_TABLE" --region "$AWS_REGION" >/dev/null 2>&1; then
            echo "Tabla DynamoDB $TF_LOCK_TABLE ya existe"
          else
            # No tenemos permisos para crearla; asumimos que ya existe porque se cre√≥ manualmente.
            echo "No puedo describir/crear la tabla (posibles permisos). Asumo que ya existe y contin√∫o."
          fi

      - name: Terraform Init (S3 backend)
        run: |
          terraform init -no-color -input=false -reconfigure \
            -backend-config="bucket=$TF_STATE_BUCKET" \
            -backend-config="key=$TF_STATE_KEY" \
            -backend-config="region=$AWS_REGION" \
            -backend-config="dynamodb_table=$TF_LOCK_TABLE" \
            -backend-config="encrypt=true"

      - name: Terraform Plan
        run: terraform plan -no-color -input=false -out=tfplan

      - name: Terraform Apply
        run: terraform apply -no-color -input=false -auto-approve tfplan
